//Asynchronous and synchronous

namespace AsyncProgExample
{
    public class juice
    {
        public void pour()
        { Console.WriteLine("Juice is poured"); }
    }
    public class eggs
    {
        public int boiled = 1;
        public async Task<eggs> boil(eggs myEggs)        {  
           
            Console.WriteLine("Eggs are boiled");
            boiled++;
            return myEggs;
        }
    }
    class bread
    {
        public void toast()
        { Console.WriteLine("Bread is toasted"); }


        public void spreadCheese()
        { Console.WriteLine("Cheese is spread"); }
        class fruits
        {
            public void cut()
            { Console.WriteLine("Fruits are cut"); }
        }
        internal class Program


        {
            static async Task Main(string[] args)
            {
                juice myjuice = new juice();
                myjuice.pour();

                
                eggs myeggs = new eggs();                
                await myeggs.boil(myeggs);
                int checkBoiled = myeggs.boiled;


                //await myeggs;
                bread mybread = new bread();
                mybread.toast();
                mybread.spreadCheese();
                fruits myfruits = new fruits();
                myfruits.cut();

                Console.WriteLine("Lunch is ready");

            }
        }
    }
}


using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;

namespace _2.AsynchronousProgramming
{
   
    internal class Program
    {
       static Dictionary<string, int> di = new Dictionary<string, int>();
        /* List<int> L1=new List<int>();*/
        static async Task<Dictionary<string, int>> FirstMethod()
        {
            string a = "async";
            int b = 5;
            di.Add(a,b);
            di.Add("hello", 5);
            di.Add("world", 10);

            Console.WriteLine("1st method execution started");
            /*Thread.Sleep(5000);*/
            await Task.Delay(3000);
            Console.WriteLine("1st Method Execiton Completed");
            return di;

        }
        static  void SecondMethod()
        {
            
            Console.WriteLine("2nd method execution started");
            Thread.Sleep(2000);
            Console.WriteLine("2nd Method Execiton Completed");
        }
        static async Task Main(string[] args)
        {
            /*FirstMethod();*/
               

            try
            {
                
                Task<Dictionary<string ,int>> b = FirstMethod();
                SecondMethod();
                var c = await b;


                foreach(KeyValuePair<string,int>g in c)
                {
                    Console.WriteLine(g.Key + g.Value);
                }
                /*SecondMethod();*/
                /*Console.WriteLine(c.Keys + c.Values.ToString());*/
                /*SecondMethod();*/
               /* Console.WriteLine(b.Result);*/
                
                /*var c =await b;*/

                
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            /*SecondMethod();*/

            Console.ReadKey();
        }
    }
}

//Tuplet


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

 

namespace Tuple_Concept
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Tuple<string> t = new Tuple<string>("mukesh");

 

            var t1 = Tuple.Create("gita", 345, 'a',45,"sadfhiuds",'b',1001,"ram");

 

            //Console.WriteLine($"{t1.Item1} , {t1.Item2} , {t1.Item3},");

 

           foreach(var i in t1)
                Console.WriteLine(i);
            t1.Length;
        }
    }
}
 
//Nested tuplet

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

 

namespace Tuple_Concept
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Tuple<string> t = new Tuple<string>("mukesh");

 

            var t1 = Tuple.Create("gita", 345, 'a', 45, "sadfhiuds", 'b', 1001, Tuple.Create(2, "hello", 4, 5, 6, 'a', 7, Tuple.Create("ad", 34, 56.0)));

 

          //  Console.WriteLine($"{t1.Item1} , {t1.Item2} , {t1.Item3},{t1.Item4},{t1.Item5},{t1.Item6},{t1.Item7},{t1.Rest}");

 

           
           Console.WriteLine(t1);
            Console.WriteLine(t1.Rest.Item1.Rest.Item1.Item2);
            
        }
    }
}
 

//Thread

using System;
class ThreadEg
{
    public static void callThread()
    {
        for(int i = 0; i < 5; i++)
        {
            Thread.Sleep(2000);
            Console.WriteLine(i);
        }
    }
}
class practice
{

 

    public static void Main(string[] args)
    { 
        Thread first = new Thread(new ThreadStart(ThreadEg.callThread));
        Thread second = new Thread(new ThreadStart(ThreadEg.callThread));
        Thread third = new Thread(new ThreadStart(ThreadEg.callThread));
        first.Start();
        first.Join();
        second.Start();
        third.Start();
        
        
    }
}